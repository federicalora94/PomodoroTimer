{"ast":null,"code":"var _jsxFileName = \"/Users/federicalora/Desktop/PomodoroTimer/src/components/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"../context/SettingsContext\"; //----- CircularProgressbar -----\n//documentation: https://www.npmjs.com/package/react-circular-progressbar\n\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\"; //----- Button components -----\n\nimport PauseButton from \"./PauseButton\";\nimport PlayButton from \"./PlayButton\";\nimport SettingsButton from \"./SettingsButtton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Timer() {\n  _s();\n\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState(\"work\"); // work / break / null\n\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  var [count, setCount] = useState(0); // Why do I use refs? To not have the values re-rendered when they change.\n\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current = secondsLeftRef.current - 1;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n    // function to change modes\n    function switchMode() {\n      const nextMode = modeRef.current === \"work\" ? \"break\" : \"work\";\n      const nextSeconds = (nextMode === \"work\" ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return; //nothing\n      }\n\n      if (secondsLeftRef.current === 0) {\n        // when timer goes to 0, change mode calling the switchMode function & update count variable\n        count = count + 1;\n        return switchMode() & setCount(count);\n      }\n\n      tick();\n      return interval;\n    }, 100);\n  }, [settingsInfo]); //--------------- timer mechanism -----------\n  // PERCENTAGE\n\n  const totalSeconds = mode === \"work\" ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100); // MINUTES\n\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = \"0\" + seconds;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settingsButtonContainer\",\n      children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n        onClick: () => settingsInfo.setShowSettings(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n      value: percentage,\n      text: minutes + \":\" + seconds,\n      styles: buildStyles({\n        textColor: \"lightblue\",\n        pathColor: mode === \"work\" ? \"lightBlue\" : \"lightGreen\",\n        trailColor: \"lightgray\",\n        // strokeLinecap: 'butt'\n        strokeWidth: 20\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playPauseButtonContainer\",\n      children: isPaused ? /*#__PURE__*/_jsxDEV(PlayButton, {\n        onClick: () => {\n          setIsPaused(false);\n          isPausedRef.current = false;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(PauseButton, {\n        onClick: () => {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timer, \"a9Fintepto/ad4DAvEGwLOf9lAU=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useContext","useState","useEffect","useRef","SettingsContext","CircularProgressbar","buildStyles","PauseButton","PlayButton","SettingsButton","Timer","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","count","setCount","secondsLeftRef","isPausedRef","modeRef","tick","current","switchMode","nextMode","nextSeconds","workMinutes","breakMinutes","interval","setInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","setShowSettings","textColor","pathColor","trailColor","strokeWidth"],"sources":["/Users/federicalora/Desktop/PomodoroTimer/src/components/Timer.js"],"sourcesContent":["import React from \"react\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"../context/SettingsContext\";\n\n//----- CircularProgressbar -----\n//documentation: https://www.npmjs.com/package/react-circular-progressbar\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\n//----- Button components -----\nimport PauseButton from \"./PauseButton\";\nimport PlayButton from \"./PlayButton\";\nimport SettingsButton from \"./SettingsButtton\";\n\nfunction Timer() {\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState(\"work\"); // work / break / null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  var [count, setCount] = useState(0);\n\n  // Why do I use refs? To not have the values re-rendered when they change.\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current = secondsLeftRef.current - 1;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n    // function to change modes\n    function switchMode() {\n      const nextMode = modeRef.current === \"work\" ? \"break\" : \"work\";\n      const nextSeconds =\n        (nextMode === \"work\"\n          ? settingsInfo.workMinutes\n          : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return; //nothing\n      }\n      if (secondsLeftRef.current === 0) {\n        // when timer goes to 0, change mode calling the switchMode function & update count variable\n        count = count + 1;\n        return switchMode() & setCount(count);\n      }\n      tick();\n      return interval;\n    }, 100);\n  }, [settingsInfo]);\n\n  //--------------- timer mechanism -----------\n\n  // PERCENTAGE\n  const totalSeconds =\n    mode === \"work\"\n      ? settingsInfo.workMinutes * 60\n      : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round((secondsLeft / totalSeconds) * 100);\n\n  // MINUTES\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = \"0\" + seconds;\n\n  return (\n    <div className=\"timerContainer\">\n      {/* <div className=\"modeSets\" style={{ textAlign: \"left\" }}>\n        <h1>Time to:{mode}</h1>\n        <h2> you have done:{count} </h2>\n      </div> */}\n\n      {/* ---- Settings button component ---- */}\n      <div className=\"settingsButtonContainer\">\n        <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n      </div>\n\n      {/* ---- Progressbar ---- */}\n\n      <CircularProgressbar\n        value={percentage}\n        text={minutes + \":\" + seconds}\n        styles={buildStyles({\n          textColor: \"lightblue\",\n          pathColor: mode === \"work\" ? \"lightBlue\" : \"lightGreen\",\n          trailColor: \"lightgray\",\n          // strokeLinecap: 'butt'\n          strokeWidth: 20,\n        })}\n      />\n\n      {/* ---- Play-Pause button component ---- */}\n      <div className=\"playPauseButtonContainer\">\n        {isPaused ? (\n          <PlayButton\n            onClick={() => {\n              setIsPaused(false);\n              isPausedRef.current = false;\n            }}\n          />\n        ) : (\n          <PauseButton\n            onClick={() => {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}