{"ast":null,"code":"import _slicedToArray from \"/Users/federicalora/Desktop/PomodoroTimer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/federicalora/Desktop/PomodoroTimer/src/components/Timer.js\";\nimport React from \"react\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"../context/SettingsContext\"; //----- CircularProgressbar -----\n//documentation: https://www.npmjs.com/package/react-circular-progressbar\n\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\"; //----- Button components -----\n\nimport PauseButton from \"./PauseButton\";\nimport PlayButton from \"./PlayButton\";\nimport SettingsButton from \"./SettingsButtton\";\n\nfunction Timer() {\n  var settingsInfo = useContext(SettingsContext);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPaused = _useState2[0],\n      setIsPaused = _useState2[1];\n\n  var _useState3 = useState(\"work\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mode = _useState4[0],\n      setMode = _useState4[1]; // work / break / null\n\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      secondsLeft = _useState6[0],\n      setSecondsLeft = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      count = _useState8[0],\n      setCount = _useState8[1]; // Why do I use refs? To not have the values re-rendered when they change.\n\n\n  var secondsLeftRef = useRef(secondsLeft);\n  var isPausedRef = useRef(isPaused);\n  var modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current = secondsLeftRef.current - 1;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(function () {\n    // function to change modes\n    function switchMode() {\n      var nextMode = modeRef.current === \"work\" ? \"break\" : \"work\";\n      var nextSeconds = (nextMode === \"work\" ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n    var interval = setInterval(function () {\n      if (isPausedRef.current) {\n        return; //nothing\n      }\n\n      if (secondsLeftRef.current === 0) {\n        // when timer goes to 0, change mode calling the switchMode function & update count variable\n        count = count + 1;\n        return switchMode() & setCount(count);\n      }\n\n      tick();\n      return interval;\n    }, 100);\n  }, [settingsInfo]); //--------------- timer mechanism -----------\n  // PERCENTAGE\n\n  var totalSeconds = mode === \"work\" ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  var percentage = Math.round(secondsLeft / totalSeconds * 100); // MINUTES\n\n  var minutes = Math.floor(secondsLeft / 60);\n  var seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = \"0\" + seconds;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modeSets\",\n    style: {\n      textAlign: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"modeTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"Time to \", mode)), /*#__PURE__*/React.createElement(CircularProgressbarWithChildren, {\n    value: percentage,\n    text: minutes + \":\" + seconds,\n    styles: buildStyles({\n      textColor: \"rgba(173, 216, 230, 0.474)\",\n      textSize: \"15\",\n      pathColor: mode === \"work\" ? \"lightBlue\" : \"white\",\n      trailColor: \"#e0e8f19e\",\n      // strokeLinecap: 'butt'\n      strokeWidth: 20\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"containerButtonsTimer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, isPaused ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playButtonContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PlayButton, {\n    onClick: function onClick() {\n      setIsPaused(false);\n      isPausedRef.current = false;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pauseButtonContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PauseButton, {\n    onClick: function onClick() {\n      setIsPaused(true);\n      isPausedRef.current = true;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settingsButtonContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SettingsButton, {\n    onClick: function onClick() {\n      return settingsInfo.setShowSettings(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Timer;","map":{"version":3,"names":["React","useContext","useState","useEffect","useRef","SettingsContext","CircularProgressbarWithChildren","buildStyles","PauseButton","PlayButton","SettingsButton","Timer","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","count","setCount","secondsLeftRef","isPausedRef","modeRef","tick","current","switchMode","nextMode","nextSeconds","workMinutes","breakMinutes","interval","setInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","textAlign","textColor","textSize","pathColor","trailColor","strokeWidth","setShowSettings"],"sources":["/Users/federicalora/Desktop/PomodoroTimer/src/components/Timer.js"],"sourcesContent":["import React from \"react\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"../context/SettingsContext\";\n\n//----- CircularProgressbar -----\n//documentation: https://www.npmjs.com/package/react-circular-progressbar\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\n//----- Button components -----\nimport PauseButton from \"./PauseButton\";\nimport PlayButton from \"./PlayButton\";\nimport SettingsButton from \"./SettingsButtton\";\n\nfunction Timer() {\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState(\"work\"); // work / break / null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  var [count, setCount] = useState(0);\n\n  // Why do I use refs? To not have the values re-rendered when they change.\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current = secondsLeftRef.current - 1;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n    // function to change modes\n    function switchMode() {\n      const nextMode = modeRef.current === \"work\" ? \"break\" : \"work\";\n      const nextSeconds =\n        (nextMode === \"work\"\n          ? settingsInfo.workMinutes\n          : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return; //nothing\n      }\n      if (secondsLeftRef.current === 0) {\n        // when timer goes to 0, change mode calling the switchMode function & update count variable\n        count = count + 1;\n        return switchMode() & setCount(count);\n      }\n      tick();\n      return interval;\n    }, 100);\n  }, [settingsInfo]);\n\n  //--------------- timer mechanism -----------\n\n  // PERCENTAGE\n  const totalSeconds =\n    mode === \"work\"\n      ? settingsInfo.workMinutes * 60\n      : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round((secondsLeft / totalSeconds) * 100);\n\n  // MINUTES\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = \"0\" + seconds;\n\n  return (\n    <div className=\"timerContainer\">\n      <div className=\"modeSets\" style={{ textAlign: \"left\" }}>\n        <h1 id=\"modeTitle\">Time to {mode}</h1>\n        {/* <h2> you have done:{count} </h2> */}\n      </div>\n\n      {/* ---- Progressbar ---- */}\n\n      <CircularProgressbarWithChildren\n      \n        value={percentage}\n        text={minutes + \":\" + seconds}\n\n        styles={buildStyles({\n          textColor: \"rgba(173, 216, 230, 0.474)\",\n          textSize: \"15\",\n          pathColor: mode === \"work\" ? \"lightBlue\" : \"white\",\n          trailColor: \"#e0e8f19e\",\n          // strokeLinecap: 'butt'\n          strokeWidth: 20,\n\n        })}\n      />\n\n      {/* ---- Play-Pause button component ---- */}\n\n      <div className=\"containerButtonsTimer\">\n\n        {isPaused ? (\n          <div className=\"playButtonContainer\">\n            <PlayButton\n              onClick={() => {\n                setIsPaused(false);\n                isPausedRef.current = false;\n              }}\n            />\n          </div>\n        ) : (\n          <div className=\"pauseButtonContainer\">\n            <PauseButton\n              onClick={() => {\n                setIsPaused(true);\n                isPausedRef.current = true;\n              }}\n            />\n          </div>\n        )}\n\n        {/* ---- Settings button component ---- */}\n\n        <div className=\"settingsButtonContainer\">\n          <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}