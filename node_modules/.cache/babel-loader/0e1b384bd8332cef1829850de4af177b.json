{"ast":null,"code":"import _slicedToArray from \"/Users/federicalora/Desktop/PomodoroTimer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/federicalora/Desktop/PomodoroTimer/src/components/Timer.js\";\nimport React from \"react\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"../context/SettingsContext\"; //----- CircularProgressbar -----\n//documentation: https://www.npmjs.com/package/react-circular-progressbar\n\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\"; //----- Button components -----\n\nimport PauseButton from \"./PauseButton\";\nimport PlayButton from \"./PlayButton\";\nimport SettingsButton from \"./SettingsButtton\";\n\nfunction Timer() {\n  var settingsInfo = useContext(SettingsContext);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPaused = _useState2[0],\n      setIsPaused = _useState2[1];\n\n  var _useState3 = useState(\"work\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mode = _useState4[0],\n      setMode = _useState4[1]; // work / break / null\n\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      secondsLeft = _useState6[0],\n      setSecondsLeft = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      count = _useState8[0],\n      setCount = _useState8[1]; // Why do I use refs? To not have the values re-rendered when they change.\n\n\n  var secondsLeftRef = useRef(secondsLeft);\n  var isPausedRef = useRef(isPaused);\n  var modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current = secondsLeftRef.current - 1;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(function () {\n    // function to change modes\n    function switchMode() {\n      var nextMode = modeRef.current === \"work\" ? \"break\" : \"work\";\n      var nextSeconds = (nextMode === \"work\" ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n    var interval = setInterval(function () {\n      if (isPausedRef.current) {\n        return; //nothing\n      }\n\n      if (secondsLeftRef.current === 0) {\n        // when timer goes to 0, change mode calling the switchMode function & update count variable\n        count = count + 1;\n        return switchMode() & setCount(count);\n      }\n\n      tick();\n      return interval;\n    }, 100);\n  }, [settingsInfo]); //--------------- timer mechanism -----------\n  // PERCENTAGE\n\n  var totalSeconds = mode === \"work\" ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  var percentage = Math.round(secondsLeft / totalSeconds * 100); // MINUTES\n\n  var minutes = Math.floor(secondsLeft / 60);\n  var seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = \"0\" + seconds;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modeSets\",\n    style: {\n      textAlign: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"Time to:\", mode), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, \" you have done:\", count, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settingsButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SettingsButton, {\n    onClick: function onClick() {\n      return settingsInfo.setShowSettings(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(CircularProgressbar, {\n    value: percentage,\n    text: minutes + \":\" + seconds,\n    styles: buildStyles({\n      textColor: \"lightblue\",\n      pathColor: mode === \"work\" ? \"lightBlue\" : \"lightGreen\",\n      trailColor: \"lightgray\",\n      // strokeLinecap: 'butt'\n      strokeWidth: 20\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, isPaused ? /*#__PURE__*/React.createElement(PlayButton, {\n    onClick: function onClick() {\n      setIsPaused(false);\n      isPausedRef.current = false;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(PauseButton, {\n    onClick: function onClick() {\n      setIsPaused(true);\n      isPausedRef.current = true;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  })));\n}\n\nexport default Timer;","map":{"version":3,"names":["React","useContext","useState","useEffect","useRef","SettingsContext","CircularProgressbar","buildStyles","PauseButton","PlayButton","SettingsButton","Timer","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","count","setCount","secondsLeftRef","isPausedRef","modeRef","tick","current","switchMode","nextMode","nextSeconds","workMinutes","breakMinutes","interval","setInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","textAlign","setShowSettings","textColor","pathColor","trailColor","strokeWidth","marginTop"],"sources":["/Users/federicalora/Desktop/PomodoroTimer/src/components/Timer.js"],"sourcesContent":["import React from \"react\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"../context/SettingsContext\";\n\n//----- CircularProgressbar -----\n//documentation: https://www.npmjs.com/package/react-circular-progressbar\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\n//----- Button components -----\nimport PauseButton from \"./PauseButton\";\nimport PlayButton from \"./PlayButton\";\nimport SettingsButton from \"./SettingsButtton\";\n\nfunction Timer() {\n    const settingsInfo = useContext(SettingsContext);\n    const [isPaused, setIsPaused] = useState(true);\n    const [mode, setMode] = useState(\"work\"); // work / break / null\n    const [secondsLeft, setSecondsLeft] = useState(0);\n    var [count, setCount] = useState(0);\n\n    // Why do I use refs? To not have the values re-rendered when they change.\n    const secondsLeftRef = useRef(secondsLeft);\n    const isPausedRef = useRef(isPaused);\n    const modeRef = useRef(mode);\n\n    function tick() {\n        secondsLeftRef.current = secondsLeftRef.current - 1;\n        setSecondsLeft(secondsLeftRef.current);\n    }\n\n    useEffect(() => {\n        // function to change modes\n        function switchMode() {\n            const nextMode = modeRef.current === \"work\" ? \"break\" : \"work\";\n            const nextSeconds =\n                (nextMode === \"work\"\n                    ? settingsInfo.workMinutes\n                    : settingsInfo.breakMinutes) * 60;\n            setMode(nextMode);\n            modeRef.current = nextMode;\n            setSecondsLeft(nextSeconds);\n            secondsLeftRef.current = nextSeconds;\n        }\n        secondsLeftRef.current = settingsInfo.workMinutes * 60;\n        setSecondsLeft(secondsLeftRef.current);\n\n        const interval = setInterval(() => {\n            if (isPausedRef.current) {\n                return; //nothing\n            }\n            if (secondsLeftRef.current === 0) {\n                // when timer goes to 0, change mode calling the switchMode function & update count variable\n                count = count + 1;\n                return switchMode() & setCount(count);\n            }\n            tick();\n            return interval;\n        }, 100);\n    }, [settingsInfo]);\n\n    //--------------- timer mechanism -----------\n\n    // PERCENTAGE\n    const totalSeconds =\n        mode === \"work\"\n            ? settingsInfo.workMinutes * 60\n            : settingsInfo.breakMinutes * 60;\n    const percentage = Math.round((secondsLeft / totalSeconds) * 100);\n\n    // MINUTES\n    const minutes = Math.floor(secondsLeft / 60);\n    let seconds = secondsLeft % 60;\n    if (seconds < 10) seconds = \"0\" + seconds;\n\n    return (\n        <div className=\"timer-container\">\n\n            <div className=\"modeSets\" style={{ textAlign: \"left\" }}>\n                <h1>Time to:{mode}</h1>\n                <h2> you have done:{count} </h2>\n            </div>\n\n            {/* ---- Settings button component ---- */}\n            <div className=\"settingsButton\">\n                <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n            </div>\n\n            {/* ---- Progressbar ---- */}\n\n            <CircularProgressbar\n                value={percentage}\n                text={minutes + \":\" + seconds}\n                styles={buildStyles({\n                    textColor: \"lightblue\",\n                    pathColor: mode === \"work\" ? \"lightBlue\" : \"lightGreen\",\n                    trailColor: \"lightgray\",\n                    // strokeLinecap: 'butt'\n                    strokeWidth: 20,\n                })}\n            />\n\n            {/* ---- Pay-Pause button component ---- */}\n            <div style={{ marginTop: \"20px\" }}>\n                {isPaused ? (\n                    <PlayButton\n                        onClick={() => {\n                            setIsPaused(false);\n                            isPausedRef.current = false;\n                        }}\n                    />\n                ) : (\n                    <PauseButton\n                        onClick={() => {\n                            setIsPaused(true);\n                            isPausedRef.current = true;\n                        }}\n                    />\n                )}\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default Timer;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,EAA0CC,MAA1C,QAAwD,OAAxD;AACA,OAAOC,eAAP,MAA4B,4BAA5B,C,CAEA;AACA;;AACA,SAASC,mBAAT,EAA8BC,WAA9B,QAAiD,4BAAjD;AACA,OAAO,4CAAP,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;;AAEA,SAASC,KAAT,GAAiB;EACb,IAAMC,YAAY,GAAGX,UAAU,CAACI,eAAD,CAA/B;;EADa,gBAEmBH,QAAQ,CAAC,IAAD,CAF3B;EAAA;EAAA,IAENW,QAFM;EAAA,IAEIC,WAFJ;;EAAA,iBAGWZ,QAAQ,CAAC,MAAD,CAHnB;EAAA;EAAA,IAGNa,IAHM;EAAA,IAGAC,OAHA,kBAG6B;;;EAH7B,iBAIyBd,QAAQ,CAAC,CAAD,CAJjC;EAAA;EAAA,IAINe,WAJM;EAAA,IAIOC,cAJP;;EAAA,iBAKWhB,QAAQ,CAAC,CAAD,CALnB;EAAA;EAAA,IAKRiB,KALQ;EAAA,IAKDC,QALC,kBAOb;;;EACA,IAAMC,cAAc,GAAGjB,MAAM,CAACa,WAAD,CAA7B;EACA,IAAMK,WAAW,GAAGlB,MAAM,CAACS,QAAD,CAA1B;EACA,IAAMU,OAAO,GAAGnB,MAAM,CAACW,IAAD,CAAtB;;EAEA,SAASS,IAAT,GAAgB;IACZH,cAAc,CAACI,OAAf,GAAyBJ,cAAc,CAACI,OAAf,GAAyB,CAAlD;IACAP,cAAc,CAACG,cAAc,CAACI,OAAhB,CAAd;EACH;;EAEDtB,SAAS,CAAC,YAAM;IACZ;IACA,SAASuB,UAAT,GAAsB;MAClB,IAAMC,QAAQ,GAAGJ,OAAO,CAACE,OAAR,KAAoB,MAApB,GAA6B,OAA7B,GAAuC,MAAxD;MACA,IAAMG,WAAW,GACb,CAACD,QAAQ,KAAK,MAAb,GACKf,YAAY,CAACiB,WADlB,GAEKjB,YAAY,CAACkB,YAFnB,IAEmC,EAHvC;MAIAd,OAAO,CAACW,QAAD,CAAP;MACAJ,OAAO,CAACE,OAAR,GAAkBE,QAAlB;MACAT,cAAc,CAACU,WAAD,CAAd;MACAP,cAAc,CAACI,OAAf,GAAyBG,WAAzB;IACH;;IACDP,cAAc,CAACI,OAAf,GAAyBb,YAAY,CAACiB,WAAb,GAA2B,EAApD;IACAX,cAAc,CAACG,cAAc,CAACI,OAAhB,CAAd;IAEA,IAAMM,QAAQ,GAAGC,WAAW,CAAC,YAAM;MAC/B,IAAIV,WAAW,CAACG,OAAhB,EAAyB;QACrB,OADqB,CACb;MACX;;MACD,IAAIJ,cAAc,CAACI,OAAf,KAA2B,CAA/B,EAAkC;QAC9B;QACAN,KAAK,GAAGA,KAAK,GAAG,CAAhB;QACA,OAAOO,UAAU,KAAKN,QAAQ,CAACD,KAAD,CAA9B;MACH;;MACDK,IAAI;MACJ,OAAOO,QAAP;IACH,CAX2B,EAWzB,GAXyB,CAA5B;EAYH,CA5BQ,EA4BN,CAACnB,YAAD,CA5BM,CAAT,CAjBa,CA+Cb;EAEA;;EACA,IAAMqB,YAAY,GACdlB,IAAI,KAAK,MAAT,GACMH,YAAY,CAACiB,WAAb,GAA2B,EADjC,GAEMjB,YAAY,CAACkB,YAAb,GAA4B,EAHtC;EAIA,IAAMI,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAYnB,WAAW,GAAGgB,YAAf,GAA+B,GAA1C,CAAnB,CAtDa,CAwDb;;EACA,IAAMI,OAAO,GAAGF,IAAI,CAACG,KAAL,CAAWrB,WAAW,GAAG,EAAzB,CAAhB;EACA,IAAIsB,OAAO,GAAGtB,WAAW,GAAG,EAA5B;EACA,IAAIsB,OAAO,GAAG,EAAd,EAAkBA,OAAO,GAAG,MAAMA,OAAhB;EAElB,oBACI;IAAK,SAAS,EAAC,iBAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAEI;IAAK,SAAS,EAAC,UAAf;IAA0B,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAb,CAAjC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,eAAazB,IAAb,CADJ,eAEI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,sBAAoBI,KAApB,MAFJ,CAFJ,eAQI;IAAK,SAAS,EAAC,gBAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI,oBAAC,cAAD;IAAgB,OAAO,EAAE;MAAA,OAAMP,YAAY,CAAC6B,eAAb,CAA6B,IAA7B,CAAN;IAAA,CAAzB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CARJ,eAcI,oBAAC,mBAAD;IACI,KAAK,EAAEP,UADX;IAEI,IAAI,EAAEG,OAAO,GAAG,GAAV,GAAgBE,OAF1B;IAGI,MAAM,EAAEhC,WAAW,CAAC;MAChBmC,SAAS,EAAE,WADK;MAEhBC,SAAS,EAAE5B,IAAI,KAAK,MAAT,GAAkB,WAAlB,GAAgC,YAF3B;MAGhB6B,UAAU,EAAE,WAHI;MAIhB;MACAC,WAAW,EAAE;IALG,CAAD,CAHvB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAdJ,eA2BI;IAAK,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAb,CAAZ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACKjC,QAAQ,gBACL,oBAAC,UAAD;IACI,OAAO,EAAE,mBAAM;MACXC,WAAW,CAAC,KAAD,CAAX;MACAQ,WAAW,CAACG,OAAZ,GAAsB,KAAtB;IACH,CAJL;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADK,gBAQL,oBAAC,WAAD;IACI,OAAO,EAAE,mBAAM;MACXX,WAAW,CAAC,IAAD,CAAX;MACAQ,WAAW,CAACG,OAAZ,GAAsB,IAAtB;IACH,CAJL;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EATR,CA3BJ,CADJ;AAiDH;;AAED,eAAed,KAAf"},"metadata":{},"sourceType":"module"}