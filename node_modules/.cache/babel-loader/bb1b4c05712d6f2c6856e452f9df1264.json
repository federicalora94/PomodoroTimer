{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/federicalora/Desktop/pomodoro-timer-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/federicalora/Desktop/pomodoro-timer-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/federicalora/Desktop/pomodoro-timer-2/src/components/Timer.js\",\n    _templateObject;\n\nimport React from 'react';\nimport { useContext, useState, useEffect, useRef } from 'react';\nimport SettingsContext from '../context/SettingsContext'; //----- CircularProgressbar ----- \n//documentation: https://www.npmjs.com/package/react-circular-progressbar\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css'; //----- Button components -----\n\nimport PauseButton from './PauseButton';\nimport PlayButton from './PlayButton';\nimport SettingsButton from './SettingsButtton'; // const red = '#f54e4e';\n// const green = '#4aec8c';\n\nfunction Timer() {\n  var settingsInfo = useContext(SettingsContext);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPaused = _useState2[0],\n      setIsPaused = _useState2[1];\n\n  var _useState3 = useState('work'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mode = _useState4[0],\n      setMode = _useState4[1]; // work / break / null\n\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      secondsLeft = _useState6[0],\n      setSecondsLeft = _useState6[1]; // Why do I use refs? To not have the values re-rendered when they change.\n\n\n  var secondsLeftRef = useRef(secondsLeft);\n  var isPausedRef = useRef(isPaused);\n  var modeRef = useRef(mode);\n\n  var tick = function tick() {\n    secondsLeftRef.current = secondsLeftRef.current - 1;\n    setSecondsLeft(secondsLeftRef.current);\n  };\n\n  useEffect(function () {\n    // function to change modes\n    var switchMode = function switchMode() {\n      var nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      var nextSeconds = (nextMode === 'work' ? settingsInfo.WorkMinutes : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    };\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n    var interval = setInterval(function () {\n      if (isPausedRef.current) {\n        return; //nothing\n      }\n\n      if (secondsLeftRef.current === 0) {\n        // when timer goes to 0, change mode calling the switchMode function\n        return switchMode();\n      }\n\n      tick();\n    }, 100); // return () => clearInterval(interval);\n  }, [settingsInfo]); //--------------- timer mechanism -----------\n  // PERCENTAGE\n\n  var totalSeconds = mode === 'work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  var percentage = Math.round(secondsLeft / totalSeconds * 100); // MINUTES\n\n  var minutes = Math.floor(secondsLeft / 60);\n  var seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = '0' + seconds;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, mode), /*#__PURE__*/React.createElement(CircularProgressbar, {\n    value: percentage,\n    text: mode === 'work' ? \"\".concat(minutes + ':' + seconds) : mode === 'break' && s(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \"\"])), minutes + ':' + seconds),\n    styles: buildStyles({\n      textColor: \"lightblue\",\n      pathColor: mode === 'work' ? \"lightBlue\" : 'lightGreen',\n      trailColor: \"lightgray\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, isPaused ? /*#__PURE__*/React.createElement(PlayButton, {\n    onClick: function onClick() {\n      setIsPaused(false);\n      isPausedRef.current = false;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }\n  }) : /*#__PURE__*/React.createElement(PauseButton, {\n    onClick: function onClick() {\n      setIsPaused(true);\n      isPausedRef.current = true;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SettingsButton, {\n    onClick: function onClick() {\n      return settingsInfo.setShowSettings(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default Timer;","map":{"version":3,"names":["React","useContext","useState","useEffect","useRef","SettingsContext","CircularProgressbar","buildStyles","PauseButton","PlayButton","SettingsButton","Timer","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","isPausedRef","modeRef","tick","current","switchMode","nextMode","nextSeconds","WorkMinutes","breakMinutes","workMinutes","interval","setInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","s","textColor","pathColor","trailColor","marginTop","setShowSettings"],"sources":["/Users/federicalora/Desktop/pomodoro-timer-2/src/components/Timer.js"],"sourcesContent":["import React from 'react';\nimport { useContext, useState, useEffect, useRef } from 'react';\nimport SettingsContext from '../context/SettingsContext';\n\n\n//----- CircularProgressbar ----- \n//documentation: https://www.npmjs.com/package/react-circular-progressbar\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\n//----- Button components -----\nimport PauseButton from './PauseButton';\nimport PlayButton from './PlayButton';\nimport SettingsButton from './SettingsButtton';\n\n// const red = '#f54e4e';\n// const green = '#4aec8c';\n\nfunction Timer() {\n\n    const settingsInfo = useContext(SettingsContext);\n\n    const [isPaused, setIsPaused] = useState(true);\n    const [mode, setMode] = useState('work'); // work / break / null\n    const [secondsLeft, setSecondsLeft] = useState(0);\n\n    // Why do I use refs? To not have the values re-rendered when they change.\n    const secondsLeftRef = useRef(secondsLeft);\n    const isPausedRef = useRef(isPaused);\n    const modeRef = useRef(mode);\n\n    const tick = () => {\n        secondsLeftRef.current = secondsLeftRef.current - 1;\n        setSecondsLeft(secondsLeftRef.current);\n    }\n\n    useEffect(() => {\n        // function to change modes\n        const switchMode = () => {\n            const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n            const nextSeconds = (nextMode === 'work' ? settingsInfo.WorkMinutes : settingsInfo.breakMinutes) * 60;\n\n            setMode(nextMode);\n            modeRef.current = nextMode;\n\n            setSecondsLeft(nextSeconds);\n            secondsLeftRef.current = nextSeconds;\n        }\n        secondsLeftRef.current = settingsInfo.workMinutes * 60;\n        setSecondsLeft(secondsLeftRef.current);\n\n        const interval = setInterval(() => {\n            if (isPausedRef.current) {\n                return; //nothing\n            }\n            if (secondsLeftRef.current === 0) {\n                // when timer goes to 0, change mode calling the switchMode function\n                return switchMode();\n            }\n            tick();\n        }, 100);\n\n        // return () => clearInterval(interval);\n    }, [settingsInfo]);\n\n\n    //--------------- timer mechanism -----------\n    // PERCENTAGE\n    const totalSeconds = mode === 'work'\n        ? settingsInfo.workMinutes * 60\n        : settingsInfo.breakMinutes * 60;\n    const percentage = Math.round(secondsLeft / totalSeconds * 100);\n    // MINUTES\n    const minutes = Math.floor(secondsLeft / 60);\n    let seconds = secondsLeft % 60;\n    if (seconds < 10) seconds = '0' + seconds;\n\n    return (\n        <div>\n            <h1>{mode}</h1>\n\n            {/* ---- Progressbar ---- */}\n\n            <CircularProgressbar\n                value={percentage}\n                text={mode === 'work' ? `${minutes + ':' + seconds}` : mode ==='break' && s`${minutes + ':' + seconds}`}\n                styles={buildStyles({\n                    textColor: \"lightblue\",\n                    pathColor:mode === 'work' ? \"lightBlue\" : 'lightGreen',\n                    trailColor: \"lightgray\"\n\n                })} />\n\n            {/* ---- Pay-Pause button component ---- */}\n            <div style={{ marginTop: '20px' }}>\n                {isPaused \n                ? <PlayButton onClick = {()=>{setIsPaused(false); isPausedRef.current = false}}/> \n                : <PauseButton onClick = {()=>{setIsPaused(true); isPausedRef.current = true}} />}\n\n            </div>\n\n\n            {/* ---- Settings button component ---- */}\n            <div style={{ marginTop: '20px' }}>\n                <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default Timer;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,EAA0CC,MAA1C,QAAwD,OAAxD;AACA,OAAOC,eAAP,MAA4B,4BAA5B,C,CAGA;AACA;;AACA,SAASC,mBAAT,EAA8BC,WAA9B,QAAiD,4BAAjD;AACA,OAAO,4CAAP,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,mBAA3B,C,CAEA;AACA;;AAEA,SAASC,KAAT,GAAiB;EAEb,IAAMC,YAAY,GAAGX,UAAU,CAACI,eAAD,CAA/B;;EAFa,gBAImBH,QAAQ,CAAC,IAAD,CAJ3B;EAAA;EAAA,IAINW,QAJM;EAAA,IAIIC,WAJJ;;EAAA,iBAKWZ,QAAQ,CAAC,MAAD,CALnB;EAAA;EAAA,IAKNa,IALM;EAAA,IAKAC,OALA,kBAK6B;;;EAL7B,iBAMyBd,QAAQ,CAAC,CAAD,CANjC;EAAA;EAAA,IAMNe,WANM;EAAA,IAMOC,cANP,kBAQb;;;EACA,IAAMC,cAAc,GAAGf,MAAM,CAACa,WAAD,CAA7B;EACA,IAAMG,WAAW,GAAGhB,MAAM,CAACS,QAAD,CAA1B;EACA,IAAMQ,OAAO,GAAGjB,MAAM,CAACW,IAAD,CAAtB;;EAEA,IAAMO,IAAI,GAAG,SAAPA,IAAO,GAAM;IACfH,cAAc,CAACI,OAAf,GAAyBJ,cAAc,CAACI,OAAf,GAAyB,CAAlD;IACAL,cAAc,CAACC,cAAc,CAACI,OAAhB,CAAd;EACH,CAHD;;EAKApB,SAAS,CAAC,YAAM;IACZ;IACA,IAAMqB,UAAU,GAAG,SAAbA,UAAa,GAAM;MACrB,IAAMC,QAAQ,GAAGJ,OAAO,CAACE,OAAR,KAAoB,MAApB,GAA6B,OAA7B,GAAuC,MAAxD;MACA,IAAMG,WAAW,GAAG,CAACD,QAAQ,KAAK,MAAb,GAAsBb,YAAY,CAACe,WAAnC,GAAiDf,YAAY,CAACgB,YAA/D,IAA+E,EAAnG;MAEAZ,OAAO,CAACS,QAAD,CAAP;MACAJ,OAAO,CAACE,OAAR,GAAkBE,QAAlB;MAEAP,cAAc,CAACQ,WAAD,CAAd;MACAP,cAAc,CAACI,OAAf,GAAyBG,WAAzB;IACH,CATD;;IAUAP,cAAc,CAACI,OAAf,GAAyBX,YAAY,CAACiB,WAAb,GAA2B,EAApD;IACAX,cAAc,CAACC,cAAc,CAACI,OAAhB,CAAd;IAEA,IAAMO,QAAQ,GAAGC,WAAW,CAAC,YAAM;MAC/B,IAAIX,WAAW,CAACG,OAAhB,EAAyB;QACrB,OADqB,CACb;MACX;;MACD,IAAIJ,cAAc,CAACI,OAAf,KAA2B,CAA/B,EAAkC;QAC9B;QACA,OAAOC,UAAU,EAAjB;MACH;;MACDF,IAAI;IACP,CAT2B,EASzB,GATyB,CAA5B,CAfY,CA0BZ;EACH,CA3BQ,EA2BN,CAACV,YAAD,CA3BM,CAAT,CAlBa,CAgDb;EACA;;EACA,IAAMoB,YAAY,GAAGjB,IAAI,KAAK,MAAT,GACfH,YAAY,CAACiB,WAAb,GAA2B,EADZ,GAEfjB,YAAY,CAACgB,YAAb,GAA4B,EAFlC;EAGA,IAAMK,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWlB,WAAW,GAAGe,YAAd,GAA6B,GAAxC,CAAnB,CArDa,CAsDb;;EACA,IAAMI,OAAO,GAAGF,IAAI,CAACG,KAAL,CAAWpB,WAAW,GAAG,EAAzB,CAAhB;EACA,IAAIqB,OAAO,GAAGrB,WAAW,GAAG,EAA5B;EACA,IAAIqB,OAAO,GAAG,EAAd,EAAkBA,OAAO,GAAG,MAAMA,OAAhB;EAElB,oBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAKvB,IAAL,CADJ,eAKI,oBAAC,mBAAD;IACI,KAAK,EAAEkB,UADX;IAEI,IAAI,EAAElB,IAAI,KAAK,MAAT,aAAqBqB,OAAO,GAAG,GAAV,GAAgBE,OAArC,IAAiDvB,IAAI,KAAI,OAAR,IAAmBwB,CAAnB,0EAAuBH,OAAO,GAAG,GAAV,GAAgBE,OAAvC,CAF3D;IAGI,MAAM,EAAE/B,WAAW,CAAC;MAChBiC,SAAS,EAAE,WADK;MAEhBC,SAAS,EAAC1B,IAAI,KAAK,MAAT,GAAkB,WAAlB,GAAgC,YAF1B;MAGhB2B,UAAU,EAAE;IAHI,CAAD,CAHvB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EALJ,eAgBI;IAAK,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAb,CAAZ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACK9B,QAAQ,gBACP,oBAAC,UAAD;IAAY,OAAO,EAAI,mBAAI;MAACC,WAAW,CAAC,KAAD,CAAX;MAAoBM,WAAW,CAACG,OAAZ,GAAsB,KAAtB;IAA4B,CAA5E;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADO,gBAEP,oBAAC,WAAD;IAAa,OAAO,EAAI,mBAAI;MAACT,WAAW,CAAC,IAAD,CAAX;MAAmBM,WAAW,CAACG,OAAZ,GAAsB,IAAtB;IAA2B,CAA3E;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAHN,CAhBJ,eAyBI;IAAK,KAAK,EAAE;MAAEoB,SAAS,EAAE;IAAb,CAAZ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI,oBAAC,cAAD;IAAgB,OAAO,EAAE;MAAA,OAAM/B,YAAY,CAACgC,eAAb,CAA6B,IAA7B,CAAN;IAAA,CAAzB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CAzBJ,CADJ;AAiCH;;AAED,eAAejC,KAAf"},"metadata":{},"sourceType":"module"}