{"ast":null,"code":"import _slicedToArray from \"/Users/federicalora/Desktop/PomodoroTimer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/federicalora/Desktop/PomodoroTimer/src/components/Timer.js\";\nimport React from 'react';\nimport { useContext, useState, useEffect, useRef } from 'react';\nimport SettingsContext from '../context/SettingsContext'; //----- CircularProgressbar ----- \n//documentation: https://www.npmjs.com/package/react-circular-progressbar\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css'; //----- Button components -----\n\nimport PauseButton from './PauseButton';\nimport PlayButton from './PlayButton';\nimport SettingsButton from './SettingsButtton';\n\nfunction Timer() {\n  var settingsInfo = useContext(SettingsContext);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPaused = _useState2[0],\n      setIsPaused = _useState2[1];\n\n  var _useState3 = useState('work'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mode = _useState4[0],\n      setMode = _useState4[1]; // work / break / null\n\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      secondsLeft = _useState6[0],\n      setSecondsLeft = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      count = _useState8[0],\n      setCount = _useState8[1]; // Why do I use refs? To not have the values re-rendered when they change.\n\n\n  var secondsLeftRef = useRef(secondsLeft);\n  var isPausedRef = useRef(isPaused);\n  var modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current = secondsLeftRef.current - 1;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(function () {\n    // function to change modes\n    function switchMode() {\n      var nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      var nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n    var interval = setInterval(function () {\n      if (isPausedRef.current) {\n        return; //nothing\n      }\n\n      if (secondsLeftRef.current === 0) {\n        // when timer goes to 0, change mode calling the switchMode function & update count variable\n        count = count + 1;\n        return switchMode() & setCount(count);\n      }\n\n      tick();\n    }, 100);\n  }, [settingsInfo]); //--------------- timer mechanism -----------\n  // PERCENTAGE\n\n  var totalSeconds = mode === 'work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  var percentage = Math.round(secondsLeft / totalSeconds * 100); // MINUTES\n\n  var minutes = Math.floor(secondsLeft / 60);\n  var seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = '0' + seconds;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modeSets\",\n    style: {\n      textAlign: 'left'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"Time to:\", mode), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \" you have done:\", count, \" \")), /*#__PURE__*/React.createElement(CircularProgressbar, {\n    value: percentage,\n    text: minutes + ':' + seconds,\n    styles: buildStyles({\n      textColor: \"lightblue\",\n      pathColor: mode === 'work' ? \"lightBlue\" : 'lightGreen',\n      trailColor: \"lightgray\",\n      pat: pat\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, isPaused ? /*#__PURE__*/React.createElement(PlayButton, {\n    onClick: function onClick() {\n      setIsPaused(false);\n      isPausedRef.current = false;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 23\n    }\n  }) : /*#__PURE__*/React.createElement(PauseButton, {\n    onClick: function onClick() {\n      setIsPaused(true);\n      isPausedRef.current = true;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SettingsButton, {\n    onClick: function onClick() {\n      return settingsInfo.setShowSettings(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default Timer;","map":{"version":3,"names":["React","useContext","useState","useEffect","useRef","SettingsContext","CircularProgressbar","buildStyles","PauseButton","PlayButton","SettingsButton","Timer","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","count","setCount","secondsLeftRef","isPausedRef","modeRef","tick","current","switchMode","nextMode","nextSeconds","workMinutes","breakMinutes","interval","setInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","textAlign","textColor","pathColor","trailColor","pat","marginTop","setShowSettings"],"sources":["/Users/federicalora/Desktop/PomodoroTimer/src/components/Timer.js"],"sourcesContent":["import React from 'react';\nimport { useContext, useState, useEffect, useRef } from 'react';\nimport SettingsContext from '../context/SettingsContext';\n\n\n//----- CircularProgressbar ----- \n//documentation: https://www.npmjs.com/package/react-circular-progressbar\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\n//----- Button components -----\nimport PauseButton from './PauseButton';\nimport PlayButton from './PlayButton';\nimport SettingsButton from './SettingsButtton';\n\n\n\nfunction Timer() {\n\n    const settingsInfo = useContext(SettingsContext);\n    const [isPaused, setIsPaused] = useState(true);\n    const [mode, setMode] = useState('work'); // work / break / null\n    const [secondsLeft, setSecondsLeft] = useState(0);\n    var [count, setCount] = useState(0);\n\n    // Why do I use refs? To not have the values re-rendered when they change.\n    const secondsLeftRef = useRef(secondsLeft);\n    const isPausedRef = useRef(isPaused);\n    const modeRef = useRef(mode);\n\n    function tick() {\n        secondsLeftRef.current = secondsLeftRef.current - 1;\n        setSecondsLeft(secondsLeftRef.current);\n    }\n\n    useEffect(() => {\n        // function to change modes\n        function switchMode() {\n            const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n            const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n            setMode(nextMode);\n            modeRef.current = nextMode;\n            setSecondsLeft(nextSeconds);\n            secondsLeftRef.current = nextSeconds;\n        }\n        secondsLeftRef.current = settingsInfo.workMinutes * 60;\n        setSecondsLeft(secondsLeftRef.current);\n\n        const interval = setInterval(() => {\n            if (isPausedRef.current) {\n                return; //nothing\n            }\n            if (secondsLeftRef.current === 0) {\n                // when timer goes to 0, change mode calling the switchMode function & update count variable\n                count = count+1;\n                return switchMode() & setCount(count);\n            }\n            tick();\n        }, 100);\n\n    }, [settingsInfo]);\n\n    //--------------- timer mechanism -----------\n    \n    // PERCENTAGE\n    const totalSeconds = mode === 'work'\n        ? settingsInfo.workMinutes * 60\n        : settingsInfo.breakMinutes * 60;\n    const percentage = Math.round(secondsLeft / totalSeconds * 100);\n    \n    // MINUTES\n    const minutes = Math.floor(secondsLeft / 60);\n    let seconds = secondsLeft % 60;\n    if (seconds < 10) seconds = '0' + seconds;\n\n    return (\n        <div >\n            <div className='modeSets' style={{textAlign:'left'}}>\n            <h1>Time to:{mode}</h1>\n            <h2> you have done:{count} </h2>\n\n          \n            </div>\n\n            {/* ---- Progressbar ---- */}\n\n            <CircularProgressbar\n                \n\n                value={percentage}\n\n                text={minutes + ':' + seconds}\n\n                styles={buildStyles({\n                    textColor: \"lightblue\",\n                    pathColor: mode === 'work' ? \"lightBlue\" : 'lightGreen',\n                    trailColor: \"lightgray\",\n                    pat\n\n\n                })} />\n\n            {/* ---- Pay-Pause button component ---- */}\n            <div style={{ marginTop: '20px' }}>\n                {isPaused\n                    ? <PlayButton onClick={() => { setIsPaused(false); isPausedRef.current = false }} />\n                    : <PauseButton onClick={() => { setIsPaused(true); isPausedRef.current = true }} />}\n\n            </div>\n\n\n            {/* ---- Settings button component ---- */}\n            <div style={{ marginTop: '20px' }}>\n                <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default Timer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}