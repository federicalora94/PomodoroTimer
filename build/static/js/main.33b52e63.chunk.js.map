{"version":3,"sources":["context/SettingsContext.js","components/ConfrimButton.js","components/Settings.js","components/PauseButton.js","components/PlayButton.js","components/SettingsButtton.js","components/Timer.js","App.js","reportWebVitals.js","index.js","assests/laptop.svg","assests/mug.svg"],"names":["SettingsContext","react","createContext","ConfirmButton","props","react_default","a","createElement","Object","assign","className","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","Settings","settingsInfo","useContext","Fragment","workMinutes","prod","thumbClassName","trackClassName","value","onChange","newValue","setWorkMinutes","min","max","breakMinutes","setBreakMinutes","ConfrimButton","onClick","setShowSettings","PauseButton","class","stroke-width","stroke-linecap","stroke-linejoin","PlayButton","SettingsButton","Timer","_useState","useState","_useState2","slicedToArray","isPaused","setIsPaused","_useState3","_useState4","mode","setMode","_useState5","_useState6","secondsLeft","setSecondsLeft","_useState7","_useState8","count","setCount","secondsLeftRef","useRef","isPausedRef","modeRef","useEffect","current","interval","setInterval","nextMode","nextSeconds","switchMode","totalSeconds","percentage","Math","round","minutes","floor","seconds","id","index_esm","styles","buildStyles","pathColor","trailColor","src","laptop","mug","SettingsButtton","components_PlayButton","components_PauseButton","App","showSettings","longBreakMinutes","setLongBreakMinutes","context_SettingsContext","Provider","components_Settings","components_Timer","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App","module","exports","p"],"mappings":"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","file":"static/js/main.33b52e63.chunk.js","sourcesContent":["// here we are using context to store the timer values:\n// value\n// min\n// max\n\nimport react from \"react\";\nconst SettingsContext = react.createContext({});\nexport default SettingsContext;\n","import React from 'react';\n\nfunction ConfirmButton(props) {\n    return (\n        <button {...props} className={'confirmButton'}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={1.2}>\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n        </button>\n    );\n}\n\nexport default ConfirmButton;","import React, { useContext } from \"react\";\nimport ReactSlider from \"react-slider\";\nimport SettingsContext from \"../context/SettingsContext\";\nimport ConfirmButton from \"./ConfrimButton\";\n\nfunction Settings() {\n  const settingsInfo = useContext(SettingsContext);\n  return (\n    <>\n      <div className=\"settingsContainer\">\n        {/* -------------------- work ---------------------------*/}\n        <label>Work time: {settingsInfo.workMinutes}:00</label>\n        <ReactSlider\n          className=\"slider\"\n          thumbClassName={\"thumb\"}\n          trackClassName={\"track\"}\n          value={settingsInfo.workMinutes}\n          onChange={(newValue) => settingsInfo.setWorkMinutes(newValue)}\n          min={1}\n          max={120}\n        />\n\n        {/* -------------------- break ---------------------------*/}\n\n        <label>Break time: {settingsInfo.breakMinutes}:00</label>\n        <ReactSlider\n          className=\"slider sliderBreak\"\n          thumbClassName={\"thumb\"}\n          trackClassName={\"track\"}\n          value={settingsInfo.breakMinutes}\n          onChange={(newValue) => settingsInfo.setBreakMinutes(newValue)}\n          min={1}\n          max={120}\n        />\n\n        {/* -------------------- confirm button ---------------------------*/}\n        <div className=\"confirmButtonDiv\">\n        <ConfirmButton onClick={() => settingsInfo.setShowSettings(false)} />\n        </div>\n      </div>\n\n    </>\n  );\n}\n\nexport default Settings;\n","import React from 'react';\n\nfunction PauseButton(props) {\n  return (\n    <button{...props}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"1.2\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n      </svg>\n    </button>\n  );\n}\n\nexport default PauseButton;","import React from 'react';\n\nfunction PlayButton(props) {\n  return (\n    <button{...props}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={1.2}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\" />\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n      </svg>\n    </button>\n  );\n}\n\nexport default PlayButton;","import React from 'react';\n\nfunction SettingsButton(props) {\n  return (\n    <button{...props}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={1.2}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\" />\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n      </svg>\n    </button>\n  );\n}\n\nexport default SettingsButton;","import React from \"react\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"../context/SettingsContext\";\n\n//----- Icons -----\nimport laptop from '../assests/laptop.svg';\nimport mug from '../assests/mug.svg';\n\n//----- CircularProgressbar -----\n//documentation: https://www.npmjs.com/package/react-circular-progressbar\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\n//----- Button components ------------------\nimport PauseButton from \"./PauseButton\";\nimport PlayButton from \"./PlayButton\";\nimport SettingsButton from \"./SettingsButtton\";\n\nfunction Timer() {\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState(\"work\"); // work / break / null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  var [count, setCount] = useState(0);\n\n  // Why do I use refs? \n  //To not have the values re-rendered when they change.\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current = secondsLeftRef.current - 1;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n    // function to change modes\n    function switchMode() {\n      const nextMode = modeRef.current === \"work\" ? \"break\" : \"work\";\n      const nextSeconds =\n        (nextMode === \"work\"\n          ? settingsInfo.workMinutes\n          : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return; //nothing\n      }\n      if (secondsLeftRef.current === 0) {\n        // when timer goes to 0, change mode calling the switchMode function & update count variable\n        count = count + 1;\n        return switchMode() & setCount(count);\n      }\n      tick();\n      return interval;\n    }, 1000);\n  }, [settingsInfo]);\n\n  //--------------- timer mechanism ----------------\n\n  // PERCENTAGE\n  const totalSeconds =\n    mode === \"work\"\n      ? settingsInfo.workMinutes * 60\n      : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round((secondsLeft / totalSeconds) * 100);\n\n  // MINUTES\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = \"0\" + seconds;\n\n  return (\n    <div className=\"timerContainer\">\n\n      {/* ---- Settings button component ---- */}\n      <header>\n        {mode === 'work'\n          ? (<h1 id=\"modeTitleWork\">Time to {mode}</h1>)\n          : (<h1 id=\"modeTitleBreak\">Take a {mode}</h1>)\n        }\n        <h2 className=\"countString\">Completed work sessions: {count}</h2>\n      </header>\n\n      {/* ---- Progressbar -------------- */}\n      <div className=\"progressBarContainer\">\n        <CircularProgressbarWithChildren\n          value={percentage}\n          strokeWidth={1}\n          styles={buildStyles({\n            pathColor: \"white\",\n            trailColor: \" rgba(255, 255, 255, 0.2)\",\n          })}>\n\n          {/* ---- Icons -------------- */}\n          {mode === 'work'\n            ? (<img className=\"clockIcon\" src={laptop} />)\n            : (<img className=\"clockIcon\" src={mug} />)\n          }\n\n          {/* ----- countdown -------------- */}\n          <h3>{minutes + \":\" + seconds}</h3>\n\n        </CircularProgressbarWithChildren>\n      </div>\n\n\n      {/* ---- Play-Pause button components ---- */}\n      <div className=\"buttonsContainer\">\n        <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n\n        {isPaused ? (\n          <PlayButton\n            onClick={() => {\n              setIsPaused(false);\n              isPausedRef.current = false;\n            }}\n          />\n        ) : (\n          <PauseButton\n            onClick={() => {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }}\n          />\n        )}\n\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;\n\n\n","import React from 'react';\nimport './App.css';\nimport { useState } from \"react\";\nimport SettingsContext from './context/SettingsContext';\nimport Settings from './components/Settings';\nimport Timer from './components/Timer';\n\n\nfunction App() {\n\n  // --------- State variables ---------\n  const [showSettings, setShowSettings] = useState(false);\n  const [workMinutes, setWorkMinutes] = useState(25);\n  const [breakMinutes, setBreakMinutes] = useState(5);\n  const [longBreakMinutes, setLongBreakMinutes] = useState(15);\n\n  return (\n    <main>\n      {/*----- using context -----*/}\n      <SettingsContext.Provider value={{\n        workMinutes,\n        breakMinutes,\n        setWorkMinutes,\n        setBreakMinutes,\n        showSettings,\n        setShowSettings,\n        longBreakMinutes,\n        setLongBreakMinutes\n      }} >\n\n        {/* Settings & Timer components */}\n        {/* if showSettings is true show the Settings, otherwise, show Timer */}\n        {showSettings ? <Settings /> : <Timer />}\n      </SettingsContext.Provider>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/laptop.80111406.svg\";","module.exports = __webpack_public_path__ + \"static/media/mug.ac4ee2f3.svg\";"],"sourceRoot":""}