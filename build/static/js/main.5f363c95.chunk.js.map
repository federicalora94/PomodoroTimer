{"version":3,"sources":["context/SettingsContext.js","components/ConfrimButton.js","components/Settings.js","components/PauseButton.js","components/PlayButton.js","components/SettingsButtton.js","components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["SettingsContext","react","createContext","ConfirmButton","props","react_default","a","createElement","Object","assign","className","xmlns","viewBox","fill","fillRule","d","clipRule","Settings","settingsInfo","useContext","workMinutes","prod","thumbClassName","trackClassName","value","onChange","newValue","setWorkMinutes","min","max","breakMinutes","setBreakMinutes","ConfrimButton","onClick","setShowSettings","PauseButton","PlayButton","index_es","icon","SettingsButton","Timer","_useState","useState","_useState2","slicedToArray","isPaused","setIsPaused","_useState3","_useState4","mode","setMode","_useState5","_useState6","secondsLeft","setSecondsLeft","_useState7","_useState8","count","setCount","secondsLeftRef","useRef","isPausedRef","modeRef","useEffect","current","interval","setInterval","nextMode","nextSeconds","switchMode","totalSeconds","percentage","Math","round","minutes","floor","seconds","SettingsButtton","index_esm","text","styles","buildStyles","textColor","pathColor","trailColor","strokeWidth","components_PlayButton","components_PauseButton","App","showSettings","longBreakMinutes","setLongBreakMinutes","context_SettingsContext","Provider","components_Settings","components_Timer","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.5f363c95.chunk.js","sourcesContent":["// here we are using context to store the timer values:\n            // value\n            // min\n            // max \n\nimport react from \"react\";\nconst SettingsContext = react.createContext({});\nexport default SettingsContext;","import React from 'react';\n\nfunction ConfirmButton(props) {\n    return (\n        <button {...props} className={'confirmButton'}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n            </svg>\n            confirm\n        </button>\n    )\n}\n\nexport default ConfirmButton;","import React, { useContext } from \"react\";\nimport ReactSlider from \"react-slider\";\nimport SettingsContext from \"../context/SettingsContext\";\nimport \"../slider.css\";\nimport ConfirmButton from \"./ConfrimButton\";\n\nfunction Settings() {\n  const settingsInfo = useContext(SettingsContext);\n  return (\n    <div className=\"settingsContainer\">\n      {/* -------------------- work */}\n      <label>Work: {settingsInfo.workMinutes}:00</label>\n      <ReactSlider\n        className=\"slider\"\n        thumbClassName={\"thumb\"}\n        trackClassName={\"track\"}\n        value={settingsInfo.workMinutes}\n        onChange={(newValue) => settingsInfo.setWorkMinutes(newValue)}\n        min={1}\n        max={120}\n      />\n\n      {/* -------------------- break */}\n\n      <label>Break: {settingsInfo.breakMinutes}:00</label>\n      <ReactSlider\n        className=\"slider\"\n        thumbClassName={\"thumb\"}\n        trackClassName={\"track\"}\n        value={settingsInfo.breakMinutes}\n        onChange={(newValue) => settingsInfo.setBreakMinutes(newValue)}\n        min={1}\n        max={120}\n      />\n\n      {/* -------------------- Long break */}\n\n      {/* <label>Long Break: {settingsInfo.breakMinutes}:00</label>\n      <ReactSlider\n        className=\"slider\"\n        thumbClassName={\"thumb\"}\n        trackClassName={\"track\"}\n        value={settingsInfo.longBreakMinutes}\n        onChange={(newValue) => settingsInfo.setLongBreakMinutes(newValue)}\n        min={1}\n        max={120}\n      /> */}\n\n      {/* ---------confirm or go back----- */}\n\n      <ConfirmButton onClick={() => settingsInfo.setShowSettings(false)} />\n    </div>\n  );\n}\n\nexport default Settings;\n","import React from 'react';\n\nfunction PauseButton(props) {\n    return (\n        <button{...props}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n        </button>\n    );\n}\n\nexport default PauseButton;","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nfunction PlayButton(props) {\n    return (\n        <div>\n            <FontAwesomeIcon icon=\"check-square\" />\n        </div>\n    );\n}\n\nexport default PlayButton;","import React from 'react';\n\n\nfunction SettingsButton(props) {\n    return (\n        <button{...props}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z\" clipRule=\"evenodd\" />\n            </svg>\n        </button>\n    );\n}\n\nexport default SettingsButton;","import React from \"react\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"../context/SettingsContext\";\n\n//----- CircularProgressbar -----\n//documentation: https://www.npmjs.com/package/react-circular-progressbar\nimport { CircularProgressbar, buildStyles } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\n//----- Button components -----\nimport PauseButton from \"./PauseButton\";\nimport PlayButton from \"./PlayButton\";\nimport SettingsButton from \"./SettingsButtton\";\n\nfunction Timer() {\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState(\"work\"); // work / break / null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  var [count, setCount] = useState(0);\n\n  // Why do I use refs? To not have the values re-rendered when they change.\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current = secondsLeftRef.current - 1;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n    // function to change modes\n    function switchMode() {\n      const nextMode = modeRef.current === \"work\" ? \"break\" : \"work\";\n      const nextSeconds =\n        (nextMode === \"work\"\n          ? settingsInfo.workMinutes\n          : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return; //nothing\n      }\n      if (secondsLeftRef.current === 0) {\n        // when timer goes to 0, change mode calling the switchMode function & update count variable\n        count = count + 1;\n        return switchMode() & setCount(count);\n      }\n      tick();\n      return interval;\n    }, 100);\n  }, [settingsInfo]);\n\n  //--------------- timer mechanism -----------\n\n  // PERCENTAGE\n  const totalSeconds =\n    mode === \"work\"\n      ? settingsInfo.workMinutes * 60\n      : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round((secondsLeft / totalSeconds) * 100);\n\n  // MINUTES\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = \"0\" + seconds;\n\n  return (\n    <div className=\"timerContainer\">\n      {/* <div className=\"modeSets\" style={{ textAlign: \"left\" }}>\n        <h1>Time to:{mode}</h1>\n        <h2> you have done:{count} </h2>\n      </div> */}\n\n      {/* ---- Settings button component ---- */}\n      <div className=\"settingsButtonContainer\">\n        <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n      </div>\n\n      {/* ---- Progressbar ---- */}\n\n      <CircularProgressbar\n        value={percentage}\n        text={minutes + \":\" + seconds}\n        styles={buildStyles({\n          textColor: \"lightblue\",\n          pathColor: mode === \"work\" ? \"lightBlue\" : \"lightGreen\",\n          trailColor: \"lightgray\",\n          // strokeLinecap: 'butt'\n          strokeWidth: 20,\n        })}\n      />\n\n      {/* ---- Play-Pause button component ---- */}\n      <div className=\"playPauseButtonContainer\">\n        {isPaused ? (\n          <PlayButton\n            onClick={() => {\n              setIsPaused(false);\n              isPausedRef.current = false;\n            }}\n          />\n        ) : (\n          <PauseButton\n            onClick={() => {\n              setIsPaused(true);\n              isPausedRef.current = true;\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;\n","import React from 'react';\nimport './App.css';\n\nimport Settings from './components/Settings';\nimport Timer from './components/Timer';\nimport { useState } from \"react\";\nimport SettingsContext from './context/SettingsContext';\n\nfunction App() {\n\n  // --------- State variables ---------\n  const [showSettings, setShowSettings] = useState(false);\n  const [workMinutes, setWorkMinutes] = useState(25);\n  const [breakMinutes, setBreakMinutes] = useState(5);\n  const [longBreakMinutes, setLongBreakMinutes] = useState(15);\n\n  return (\n    <main>\n      {/*----- using context -----*/}\n      <SettingsContext.Provider value={{\n        workMinutes,\n        breakMinutes,\n        setWorkMinutes,\n        setBreakMinutes,\n        showSettings,\n        setShowSettings,\n        longBreakMinutes,\n        setLongBreakMinutes\n      }} >\n      \n      \n      {/* Settings & Timer components */}\n      {/* if showSettings is true show the Settings, otherwise, show Timer */}\n      {showSettings ? <Settings /> : <Timer />}\n      \n      </SettingsContext.Provider>\n\n\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}